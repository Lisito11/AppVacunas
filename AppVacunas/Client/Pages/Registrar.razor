@page "/registrar"
@inject ISnackbar Snackbar
@using Helpers
@inject IJSRuntime jsRuntime

<h1>Registrar Vacunado</h1>
<style>
    .map {
        width: 250px;
        height: 250px;
    }
</style>
@inject NavigationManager navigationManager
<MudGrid Justify="Justify.Center">
    @if (!visible) {
        <MudItem xs="6">
            <MudCard>
                <MudCardContent>
                    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                        <MudExpansionPanels>
                            <MudExpansionPanel Text="Datos Personales">
                                <MudTextField T="string" Label="Cédula" Required="true" RequiredError="@MensajeError("Cédula")" @bind-Value="@CedulaSeleccionada" TextChanged="BuscarDatosCedula" />
                                <MudTextField T="string" Label="Nombres" Required="true" RequiredError="@MensajeError("Nombres")" @bind-Value="@datosCedula.Nombres" />
                                <MudTextField T="string" Label="Primer Apellido" Required="true" RequiredError="@MensajeError("Primer Apellido")" @bind-Value="Apellido1" />
                                <MudTextField T="string" Label="Segundo Apellido" Required="true" RequiredError="@MensajeError("Segundo Apellido")" @bind-Value="Apellido2" />
                                <MudTextField T="string" Label="Teléfono" RequiredError="@MensajeError("Teléfono")" @bind-Value="Telefono" />
                                <MudDatePicker Label="Fecha de Nacimiento" @bind-Text="FechaNacimiento" Editable="true" />
                            </MudExpansionPanel>
                            <MudExpansionPanel Text="Dirección">
                                <MudGrid>
                                    <MudItem xs="12">
                                        <MudGrid Spacing="1">
                                            <MudItem>
                                                <MudTextField @bind-Value="CalleDireccion" Label="Calle" Variant="Variant.Text"></MudTextField>
                                            </MudItem>
                                            <MudItem sm="4">
                                                <MudSelect T="string" Label="Provincia" @bind-Value="ProvinciaSeleccionada">
                                                    @foreach (var provincia in provincias) {<MudSelectItem Value="@provincia.Id.ToString()"> @provincia.NombreProvincia </MudSelectItem>}
                                                </MudSelect>
                                            </MudItem>
                                            <MudItem sm="3">
                                                <MudSelect T="string" Label="Pais" @bind-Value="PaisSeleccionado">
                                                    @foreach (var pais in paises) {<MudSelectItem Value="@pais.Id.ToString()"> @pais.NombrePais </MudSelectItem>}
                                                </MudSelect>
                                            </MudItem>
                                        </MudGrid>
                                        <br />
                                        <MudItem>
                                            <MudButton OnClick="@BuscarDireccion" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Buscar</MudButton>
                                        </MudItem>
                                        @if (mapVisible) {

                                        }

                                    </MudItem>
                                </MudGrid>
                            </MudExpansionPanel>

                            <MudExpansionPanel Text="Datos Vacunación">
                                <MudSelect T="string" Label="Vacunas" @bind-Value="VacunaSeleccionada">
                                    @foreach (var vacuna in vacunas) {<MudSelectItem Value="@vacuna.Id.ToString()"> @vacuna.Nombre </MudSelectItem>}
                                </MudSelect>
                                <MudDatePicker Label="Fecha Primera Dosis" @bind-Date="fechaPrimeraDosis" />
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    </MudForm>
                </MudCardContent>
                <MudCardActions>
                    <MudButton OnClick="@RegistrarVacunado" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Registrar Vacunado</MudButton>
                </MudCardActions>
            </MudCard>

        </MudItem>
    }
    @if (visible) {
        <MudItem xs="6">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Vacunado</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudPaper>
                        <MudText>@PersonaValidada.Nombres @PersonaValidada.Apellido1 @PersonaValidada.Apellido2 </MudText>
                        <MudText>@PersonaValidada.Vacuna.Nombre</MudText>
                        <MudDivider DividerType="DividerType.Middle" Class="my-6" />
                        <MudText Typo="Typo.body1">Primera dosis: @PrimeraDosisValidada</MudText>
                    </MudPaper>
                    <MudDatePicker Label="Fecha Segunda Dosis" @bind-Date="fechaSegundaDosis" Editable="true" TitleDateFormat="yyyy-MM-dd" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton OnClick="AgregarSegundaDosis" Variant="Variant.Filled" Color="Color.Primary">Agregar Segunda Dosis</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    }
</MudGrid>



@code{
        protected override async Task OnInitializedAsync() {
            personas = await Http.GetFromJsonAsync<List<Persona>>("api/personas");
            provincias = await Http.GetFromJsonAsync<List<Provincia>>("api/provincias");
            vacunas = await Http.GetFromJsonAsync<List<Vacuna>>("api/vacunas");
            paises = await Http.GetFromJsonAsync<List<Pais>>("api/paises");

            // Mapa


        }

     

        bool success;
        bool visible = false;
        bool mapVisible = false;
        string[] errors = { };
        MudForm form;
        string MensajeError(string field) => $"{field} debe introducirse!";

        DateTime? fechaPrimeraDosis = DateTime.Today;
        DateTime? fechaSegundaDosis = DateTime.Today;

        public string Nombres { get; set; }
        public string Apellido1 { get; set; }
        public string Apellido2 { get; set; }
        public string Telefono { get; set; }
        public string FechaNacimiento { get; set; }
        public string ProvinciaSeleccionada { get; set; }
        public string VacunaSeleccionada { get; set; }
        public string CedulaSeleccionada { get; set; }
        public string PaisSeleccionado { get; set; }
        public string CalleDireccion { get; set; }
        public string LatitudDireccion { get; set; }
        public string LongitudDireccion { get; set; }
        public string PrimeraDosisValidada { get; set; }

        private List<Provincia> provincias = new List<Provincia>();

        private List<Vacuna> vacunas = new List<Vacuna>();

        private List<Persona> personas = new List<Persona>();

        private List<Pais> paises = new List<Pais>();

        Persona persona = new Persona();

        private CedulaApi datosCedula = new CedulaApi();

        private Geocoding GeocodingDireccion = new Geocoding();

        Persona PersonaValidada = new Persona();

        private List<Direccion> direcciones = new List<Direccion>();

        private Direccion direccionPersona = new Direccion();

        Vacuna vacuna = new Vacuna();

        

        private async Task BuscarDatosCedula() {
            if (!String.IsNullOrEmpty(CedulaSeleccionada) && CedulaSeleccionada.Length == 11) {
                datosCedula = await Http.GetFromJsonAsync<CedulaApi>($"https://api.adamix.net/apec/cedula/{CedulaSeleccionada}");
                Nombres = datosCedula.Nombres;
                Apellido1 = datosCedula.Apellido1;
                Apellido2 = datosCedula.Apellido2;
                FechaNacimiento = datosCedula.FechaNacimiento.ToString().Substring(0, 11);

            }
            //Console.WriteLine(CedulaSeleccionada);
        }


    private async Task BuscarDireccion() {
        Pais pais;
        Provincia provincia;


        pais = paises.Where(x => x.Id == int.Parse(PaisSeleccionado)).FirstOrDefault();
        provincia = provincias.Where(x => x.Id == int.Parse(ProvinciaSeleccionada)).FirstOrDefault();


        if (!String.IsNullOrEmpty(CalleDireccion) && !String.IsNullOrEmpty(PaisSeleccionado) && !String.IsNullOrEmpty(ProvinciaSeleccionada)) {
            GeocodingDireccion = await Http.GetFromJsonAsync<Geocoding>($"https://maps.googleapis.com/maps/api/geocode/json?address={CalleDireccion.Replace(" ", "+")},+{provincia.NombreProvincia.Replace(" ", "+")},+{pais.NombrePais.Replace(" ", "+")}&key=AIzaSyD2tTEiP_uPyq8Re9YnQyD6LkB5TGX1xnw");
            LatitudDireccion = GeocodingDireccion.Results[0].Geometry.Location.Lat.ToString();
            LongitudDireccion = GeocodingDireccion.Results[0].Geometry.Location.Lng.ToString();
            string algo = GeocodingDireccion.Results[0].FormattedAddress;
            Console.WriteLine(LatitudDireccion);
            Console.WriteLine(LongitudDireccion);

            mapVisible = true;

        }
    }


    private async Task AgregarSegundaDosis() {

        string json = "[{\"op\": \"replace\",\"path\": \"/fechaDosis2\",\"value\":" + $"\"{fechaSegundaDosis.Value.ToString("yyyy-MM-dd")}\"" + "}]";

        HttpContent content = new StringContent(json, Encoding.UTF8, "application/json-patch+json");
        var response = await Http.PatchAsync($"api/personas/{CedulaSeleccionada}", content);

        Console.WriteLine(response.Content);

        //var respuestaPersona = await Http.PutAsJsonAsync("api/personas", personaEdit);

        if (response.IsSuccessStatusCode) {
            //Redirigiendonos a la pagina de consultar vacunados
            navigationManager.NavigateTo("consultar");
        } else {
            Console.WriteLine();
        }

    }


    private async Task RegistrarVacunado() {
        PersonaValidada = personas.Where(x => x.Cedula == CedulaSeleccionada).FirstOrDefault();

        if (PersonaValidada != null) {
            if (PersonaValidada.FechaDosis2 == null) {
                visible = true;
                Snackbar.Add($"{Nombres} {Apellido1} {Apellido2} Ya se cuentra registrado!", Severity.Info);
                PrimeraDosisValidada = PersonaValidada.FechaDosis1.ToString().Substring(0, 9);
            } else {
                Snackbar.Add($"{Nombres} {Apellido1} Ya se encuentra registrado y con segunda dosis!", Severity.Info);
                navigationManager.NavigateTo("consultar");
            }

        } else {
            vacuna = vacunas.Where(x => x.Id == int.Parse(VacunaSeleccionada)).FirstOrDefault();

            if (vacuna.CantidadVacuna <= 0) {
                Snackbar.Add($"No se puede vacunar, no quedan vacunas {vacuna.Nombre}", Severity.Error);
                navigationManager.NavigateTo("");

            } else {
                //Creando nueva direccion con la provincia seleccionada
                Direccion direccion = new Direccion() {
                    ProvinciaId = int.Parse(ProvinciaSeleccionada),
                    PaisId = int.Parse(PaisSeleccionado),
                    Calle = CalleDireccion,
                    Latitud = decimal.Parse(LatitudDireccion),
                    Logitud = decimal.Parse(LongitudDireccion)
                };

                var respuesta = await Http.PostAsJsonAsync("api/direcciones", direccion);

                if (respuesta.IsSuccessStatusCode) {
                    direcciones = await Http.GetFromJsonAsync<List<Direccion>>("api/direcciones");
                    if (direcciones.Count > 0) {
                        direccionPersona = direcciones.LastOrDefault();

                        //Creando persona correctamente

                        persona.Nombres = Nombres;
                        persona.Apellido1 = Apellido1;
                        persona.Apellido2 = Apellido2;
                        persona.Cedula = CedulaSeleccionada;
                        persona.Telefono = Telefono;
                        persona.DireccionId = direccionPersona.Id;
                        persona.FechaDosis1 = fechaPrimeraDosis;
                        persona.FechaNacimiento = DateTime.Parse(FechaNacimiento);
                        persona.VacunaId = int.Parse(VacunaSeleccionada);
                        persona.EstatusVacuna = 1;

                        var respuestaPersona = await Http.PostAsJsonAsync("api/personas", persona);

                        if (respuestaPersona.IsSuccessStatusCode) {
                            //Redirigiendonos a la pagina de consultar vacunados
                            navigationManager.NavigateTo("consultar");
                        }
                    }
                }
            }
        }

    }


}
