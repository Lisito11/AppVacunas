@page "/anularvacunado"


<h3>AnularVacunado</h3>


@inject NavigationManager navigationManager

<MudGrid Justify="Justify.Center">



    <MudItem xs="6">
        <MudCard>
            <MudCardContent>
                <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                    <MudTextField T="string" Label="Cédula" Required="true" RequiredError="@MensajeError("Cédula")" @bind-Value="@CedulaSeleccionada" />


                </MudForm>
            </MudCardContent>
            <MudCardActions>
                <MudButton OnClick="@EliminarVacunado" Variant="Variant.Filled" Color="Color.Error" Class="ml-auto">Eliminar  Vacunado</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>

</MudGrid>



@code {

    List<Persona> personas = new List<Persona>();

    bool success;
    bool visible = false;
    string[] errors = { };
    MudForm form;
    string MensajeError(string field) => $"{field} debe introducirse!";

    public string CedulaSeleccionada { get; set; }

    private async Task EliminarVacunado()
    {
        string json = "[{\"op\": \"replace\",\"path\": \"/EstatusVacuna\",\"value\":" + $"\"0\"" + "}]";

        HttpContent content = new StringContent(json, Encoding.UTF8, "application/json-patch+json");
        var response = await Http.PatchAsync($"api/personas/{CedulaSeleccionada}", content);

        Console.WriteLine(response.Content);

        //var respuestaPersona = await Http.PutAsJsonAsync("api/personas", personaEdit);

        if (response.IsSuccessStatusCode)
        {
            //Redirigiendonos a la pagina de consultar vacunados
            navigationManager.NavigateTo("consultar");
        }
        

    }
    


    protected override async Task OnInitializedAsync()
    {
        personas = await Http.GetFromJsonAsync<List<Persona>>("api/personas");

    }


}


